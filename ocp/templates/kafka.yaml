---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: kafka
  namespace: instana-kafka
  labels:
    strimzi.io/cluster: instana
spec:
  replicas: 3
  roles:
     - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: 50Gi
        deleteClaim: true
        class: ${RWO_STORAGECLASS}
  template:
    pod:
      tmpDirSizeLimit: 500Mi
      # Add the following Affinity snippet to schedule each pod on a different node. 
      #affinity:
      #  podAntiAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      - labelSelector:
      #          matchLabels:
      #            strimzi.io/pool-name: kafka
      #        topologyKey: "kubernetes.io/hostname"
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: controller
  namespace: instana-kafka
  labels:
    strimzi.io/cluster: instana
spec:
  replicas: 3
  roles:
    - controller
  storage:
    type: persistent-claim
    size: 50Gi
    deleteClaim: true
    class: ${RWO_STORAGECLASS}
  template:
    pod:
      tmpDirSizeLimit: 500Mi
      # Add the following Affinity snippet to schedule each pod on a different node. 
      #affinity:
      #  podAntiAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      - labelSelector:
      #          matchLabels:
      #            strimzi.io/pool-name: controller
      #        topologyKey: "kubernetes.io/hostname"
---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: instana
  namespace: instana-kafka
  labels:
    strimzi.io/cluster: instana
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft:  enabled
spec:
  # Cruise Control needs more than 1 kafka node
  cruiseControl: {}
  kafka:
    image: ${INSTANA_IMAGE_REGISTRY}/${KAFKA_IMAGE_REPOSITORY}/${KAFKA_IMAGE_NAME}:${KAFKA_IMAGE_TAG}
    version: 3.9.1
    replicas: 3
    listeners:
    - name: scram
      port: 9092
      type: internal
      tls: false
      authentication:
        type: scram-sha-512
      configuration:
        useServiceDnsDomain: true
    authorization:
      type: simple
      superUsers:
      - strimzi-kafka-user
    # storage:
    #   type: jbod
    #   volumes:
    #   - id: 0
    #     type: persistent-claim
    #     size: 100Gi
    #     deleteClaim: true
    #     class: ${RWO_STORAGECLASS}
    config:
      offsets.topic.replication.factor: 1          ### 3
      transaction.state.log.replication.factor: 1  ### 3
      transaction.state.log.min.isr: 1             ### 2
      default.replication.factor: 1                ### 3
      min.insync.replicas: 1                       ### 2
      max.message.bytes: 52428800
      replica.fetch.max.bytes: 52428800
    jvmOptions:
      -Xms: 2000m
      -Xmx: 2000m
    resources:
      limits:
        memory: 5Gi
      requests:
        cpu: "1"
        memory: 4Gi
  # zookeeper:
  #   replicas: 3
  #   resources:
  #     limits:
  #       memory: 1Gi
  #     requests:
  #       cpu: "1"
  #       memory: 1Gi
  #   storage:
  #     type: persistent-claim
  #     size: 5Gi
  #     deleteClaim: true
  #     class: ${RWO_STORAGECLASS}
  entityOperator:
    template:
      pod:
        tmpDirSizeLimit: 100Mi
      topicOperatorContainer:
        env:
        - name: STRIMZI_USE_ZOOKEEPER_TOPIC_STORE
          value: "true"
    userOperator:
      image: ${INSTANA_IMAGE_REGISTRY}/${INSTANA_DATASTORE_OPERATOR_IMAGE_REPOSITORY}/${KAFKA_OPERATOR_IMAGE_NAME}:${KAFKA_OPERATOR_IMAGE_TAG}
    topicOperator:
      image: ${INSTANA_IMAGE_REGISTRY}/${INSTANA_DATASTORE_OPERATOR_IMAGE_REPOSITORY}/${KAFKA_OPERATOR_IMAGE_NAME}:${KAFKA_OPERATOR_IMAGE_TAG}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: strimzi-kafka-user
  namespace: instana-kafka
  labels:
    strimzi.io/cluster: instana
spec:
  authentication:
    type: scram-sha-512
  authorization:
    type: simple
    acls:
    - resource:
        type: topic
        name: '*'
        patternType: literal
      operations:
      - All
      host: "*"
    - resource:
        type: group
        name: '*'
        patternType: literal
      operations:
      - All
      host: "*"